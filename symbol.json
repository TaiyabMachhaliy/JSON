[{"id":"19","leftside_design":"\u00d7\u035c\u00d7","rightside_design":"\u00d7\u035c\u00d7","symbol":"\ud83d\udd2f"},{"id":"21","leftside_design":"\ua9c1\u0994\u09e3\u262c\u271e","rightside_design":"\u271e\u262c\u0994\u09e3\ua9c2","symbol":"\ud83c\udf1f"},{"id":"22","leftside_design":"\u2570\u203f\u256f\u3164\u03df","rightside_design":"\u2020","symbol":"\u2728"},{"id":"23","leftside_design":"\u25e4","rightside_design":" \u25e2","symbol":"\u265b"},{"id":"24","leftside_design":"\u4e48 \u4e97","rightside_design":" \u4e48","symbol":"\ud83d\udc51\ud83d\udc9b"},{"id":"25","leftside_design":"\u2580\u2584\u2580\u2584\u2580\u2584 ","rightside_design":"\u2584\u2580\u2584\u2580\u2584\u2580","symbol":"\u0fd0\u2122"},{"id":"26","leftside_design":"\u0f04\u2764\ufe0f","rightside_design":"\uaadd\u2147\u049f\u0fd0\u2764\ufe0f","symbol":"\ud83c\udf20"},{"id":"27","leftside_design":"\ua9c1\u06dd\u225b\u0f12\u0390 ","rightside_design":"\u0f12\u225b\u06dd\ua9c2","symbol":"(\u2741\u00b4\u25e1`\u2741)"},{"id":"28","leftside_design":"\u2591\u2592\u2593\u2588\u2593\u2592\u2591 ","rightside_design":"\u2591\u2592\u2593\u2588\u2593\u2592\u2591 ","symbol":"\u2776\u2779\u2778"},{"id":"29","leftside_design":"\u00b0\u00b0|\ufe3b\u2566\u0335\u0335\u0347","rightside_design":"\ufe3b\u2566\u0335\u0335\u0347\u033f\u033f\u033f\u033f\u2564\u2500\u2022\u2022","symbol":"\u2591"},{"id":"30","leftside_design":"\u2582\u2583\u2584\u2585\u2586\u2587\u2588\u2593\u2592\u2591","rightside_design":"\u2591\u2592\u2593\u2588\u2587\u2586\u2585\u2584\u2583\u2582\r","symbol":"\u2776\u2779\u2778"},{"id":"31","leftside_design":"\u25e5\u1cc4","rightside_design":"\u1cc4\u25e4","symbol":"\u2776 \u2777 \u2778 \u2779 \u277a \u277b \u277c \u277d \u277e"},{"id":"33","leftside_design":"\u2584\ufe3b\u253b\u2550\u2533\u4e00","rightside_design":"\u2584\ufe3b\u253b\u2550\u2533\u4e00","symbol":"\u24cb"},{"id":"34","leftside_design":"\ua9c1\u0f12","rightside_design":"\u0f12\ua9c2","symbol":"\u262c"},{"id":"35","leftside_design":"\u2601\u2728","rightside_design":"\u2728\u2601","symbol":"\ud83d\udc32"},{"id":"36","leftside_design":"\u2605\u5f61 \ua9c1\ud80c\ude88\ud808\udd9c","rightside_design":"\ud808\udd9c\ud80c\ude89\ua9c2 \u5f61\u2605","symbol":"\ud83d\ude09\ud83d\udc4c"},{"id":"37","leftside_design":"[DP]=\u2584\ufe3b\u253b\u2550\u2533\u4e00","rightside_design":"\u5929\uff30","symbol":"\ud83d\ude0d"},{"id":"38","leftside_design":"\u30c4","rightside_design":"\u30c4","symbol":"\u3005"},{"id":"39","leftside_design":"\u4e97\uff2d\uff52\u300e","rightside_design":"\u300f\uff2f\uff30\u4e97","symbol":"\u2620"},{"id":"40","leftside_design":"\u0f12\u262c","rightside_design":"\u262c\u0f12","symbol":"\u2620"},{"id":"41","leftside_design":"\u273f\u4e42 ","rightside_design":" \u4e42\u273f","symbol":"\ud83d\udc7f"},{"id":"42","leftside_design":"\ua9c1\u2abb\u2665","rightside_design":"\u2665\u2abc\ua9c2","symbol":"\ud83d\udcde"},{"id":"43","leftside_design":"\ua670\ud80c\udc1a\u1b44","rightside_design":"\u2591\u25a9","symbol":"\u00a9\u00ae7 !!"},{"id":"44","leftside_design":"\u25e6\u2022\u25cf\u25c9\u273f","rightside_design":"\u273f\u25c9\u25cf\u2022\u25e6","symbol":"\u03c6(*\uffe30\uffe3)"},{"id":"45","leftside_design":"\ud83c\udf38\ud83d\udc95","rightside_design":"\ud83d\udc95\ud83c\udf38","symbol":"\ud83e\udee7"},{"id":"46","leftside_design":"~\ud83c\udf80\u2661","rightside_design":"\ud83c\udf80~","symbol":"\u262f"},{"id":"53","leftside_design":"sd","rightside_design":"sd","symbol":"sd"},{"id":"54","leftside_design":"sdsds","rightside_design":"dsds","symbol":"sdsd"},{"id":"55","leftside_design":"irshad","rightside_design":"irshad","symbol":"irshad"},{"id":"56","leftside_design":"sds","rightside_design":"sds","symbol":"sdsd"},{"id":"57","leftside_design":"irshad","rightside_design":"irshad","symbol":"irshad"},{"id":"58","leftside_design":"","rightside_design":"","symbol":""},{"id":"59","leftside_design":"wewew","rightside_design":"wewew","symbol":"ewewew"},{"id":"60","leftside_design":"wewew","rightside_design":"wewew","symbol":"ewewew"},{"id":"61","leftside_design":"wewew","rightside_design":"wewew","symbol":"ewewew"},{"id":"62","leftside_design":"tikdi","rightside_design":"tikdi","symbol":"tikdi"},{"id":"65","leftside_design":"NEW","rightside_design":"NEW","symbol":"NEW"},{"id":"66","leftside_design":"STYLWE","rightside_design":"STYLE","symbol":"STYLE"},{"id":"67","leftside_design":"tikdi","rightside_design":"tikdi","symbol":"tikdi"},{"id":"68","leftside_design":"tikdi","rightside_design":"tikdi","symbol":"tikdi"},{"id":"69","leftside_design":"dfdfd","rightside_design":"dfdf","symbol":"dfdf"},{"id":"70","leftside_design":"indi","rightside_design":"indi","symbol":"indi"},{"id":"71","leftside_design":"indi","rightside_design":"indi","symbol":"indi"},{"id":"72","leftside_design":"dnfdkfnd","rightside_design":"dknfkdf","symbol":"dfdfdfdfdf"},{"id":"73","leftside_design":"Changvadiya","rightside_design":"irshad","symbol":"Salimbhai"},{"id":"74","leftside_design":"Irshad","rightside_design":"Changvadiya","symbol":"salimbhai"},{"id":"75","leftside_design":"ha","rightside_design":"sa","symbol":"ha"},{"id":"76","leftside_design":"ha","rightside_design":"ha","symbol":"ha"},{"id":"77","leftside_design":"777","rightside_design":"33c","symbol":"233"},{"id":"78","leftside_design":"left","rightside_design":"right","symbol":"symbol"},{"id":"79","leftside_design":"df","rightside_design":"dfdf","symbol":"fdfdf"},{"id":"80","leftside_design":"tikdi","rightside_design":"tikdi","symbol":"tikdi"},{"id":"81","leftside_design":"fg","rightside_design":"fgfg","symbol":"fgfg"},{"id":"82","leftside_design":"dfd","rightside_design":"fdf","symbol":"dfd"},{"id":"83","leftside_design":"dfd","rightside_design":"fdf","symbol":"dfd"},{"id":"84","leftside_design":"df","rightside_design":"dfd","symbol":"fdf"},{"id":"85","leftside_design":"sdsds","rightside_design":"dsd","symbol":"sdsds"},{"id":"86","leftside_design":"import 'package:flutter\/material.dart';\rimport 'package:http\/http.dart' as http;\rimport 'dart:convert';\rimport 'package:flutter\/services.dart';\r\rclass GetScreen extends StatefulWidget {\r  const GetScreen({super.key});\r\r  @override\r  State<GetScreen> createState() => _GetScreenState();\r}\r\rclass _GetScreenState extends State<GetScreen> {\r  List<Map<String, dynamic>> _nicknames = [];\r  List<Map<String, dynamic>> _filteredNicknames = [];\r  bool _isLoading = false;\r  final TextEditingController _numberController = TextEditingController();\r  final TextEditingController _searchController = TextEditingController();\r  final FocusNode _searchFocusNode = FocusNode(); \/\/ Focus node for the search field\r  String _sortOrder = 'ASC';\r\r  @override\r  void initState() {\r    super.initState();\r    _fetchNicknames();\r    _numberController.addListener(_fetchNicknames);\r    _searchController.addListener(_filterNicknames);\r  }\r\r  Future<void> _fetchNicknames() async {\r    final String numberText = _numberController.text;\r    int? number;\r\r    if (numberText.isNotEmpty) {\r      number = int.tryParse(numberText);\r      if (number == null || number <= 0) {\r        setState(() {\r          _nicknames = [];\r          _filteredNicknames = [];\r        });\r        return;\r      }\r    }\r\r    setState(() {\r      _isLoading = true;\r    });\r\r    try {\r      final response = await http.get(Uri.parse('https:\/\/raw.githubusercontent.com\/TaiyabMachhaliy\/JSON\/refs\/heads\/main\/symbol.json'));\r\r      if (response.statusCode == 200) {\r        final List<dynamic> data = json.decode(response.body);\r\r        if (_sortOrder == 'ASC') {\r          data.sort((a, b) => (a['id'] ?? 0).compareTo(b['id'] ?? 0));\r        } else {\r          data.sort((a, b) => (b['id'] ?? 0).compareTo(a['id'] ?? 0));\r        }\r\r        setState(() {\r          _nicknames = number != null ? data.take(number).cast<Map<String, dynamic>>().toList() : data.cast<Map<String, dynamic>>();\r          _filteredNicknames = List.from(_nicknames);\r        });\r      } else {\r        throw Exception('Failed to load nicknames');\r      }\r    } catch (e) {\r      ScaffoldMessenger.of(context).showSnackBar(\r        SnackBar(content: Text('Error: ${e.toString()}')),\r      );\r    } finally {\r      setState(() {\r        _isLoading = false;\r      });\r    }\r  }\r\r  void _filterNicknames() {\r    String query = _searchController.text.toLowerCase();\r\r    setState(() {\r      _filteredNicknames = _nicknames.where((nickname) {\r        return (nickname['leftside_design'] ?? '').toLowerCase().contains(query) ||\r            (nickname['rightside_design'] ?? '').toLowerCase().contains(query) ||\r            (nickname['symbol'] ?? '').toLowerCase().contains(query) ||\r            (nickname['id']?.toString() ?? '').contains(query);\r      }).toList();\r    });\r  }\r\r  void _copyToClipboard(String text) {\r    Clipboard.setData(ClipboardData(text: text));\r    ScaffoldMessenger.of(context).showSnackBar(\r      SnackBar(content: Text('Copied to clipboard: $text')),\r    );\r  }\r\r  @override\r  void dispose() {\r    _numberController.removeListener(_fetchNicknames);\r    _searchController.removeListener(_filterNicknames);\r    _numberController.dispose();\r    _searchController.dispose();\r    _searchFocusNode.dispose();\r    super.dispose();\r  }\r\r  @override\r  Widget build(BuildContext context) {\r    final isDarkMode = Theme.of(context).brightness == Brightness.dark;\r\r    return RawKeyboardListener(\r      focusNode: FocusNode(),\r      onKey: (RawKeyEvent event) {\r        if (event.isControlPressed && event.logicalKey == LogicalKeyboardKey.keyF) {\r          _searchFocusNode.requestFocus();\r        }\r      },\r      child: Scaffold(\r        appBar: AppBar(\r          title: const Text('Nicknames List'),\r          centerTitle: true,\r          leading: Padding(\r            padding: const EdgeInsets.all(8.0),\r            child: SizedBox(\r              width: 200, \/\/ Increase width to fit the full text\r              child: Center(\r                child: Text(\r                  'Total Designs: ${_filteredNicknames.length}', \/\/ Display text fully\r                  style: TextStyle(\r                    fontWeight: FontWeight.bold,\r                    fontSize: 16,\r                    color: isDarkMode ? Colors.white : Colors.black, \/\/ Adjust for theme\r                  ),\r                  overflow: TextOverflow.ellipsis, \/\/ Handle overflow if needed\r                ),\r              ),\r            ),\r          ),\r\r          actions: [\r            Padding(\r              padding: const EdgeInsets.all(8.0),\r              child: SizedBox(\r                width: 150,\r                child: TextField(\r                  controller: _numberController,\r                  keyboardType: TextInputType.number,\r                  decoration: InputDecoration(\r                    hintText: 'Enter number',\r                    hintStyle: TextStyle(color: isDarkMode ? Colors.white : Colors.black),\r                    border: const OutlineInputBorder(),\r                  ),\r                ),\r              ),\r            ),\r            IconButton(\r              icon: const Icon(Icons.search),\r              onPressed: _fetchNicknames,\r            ),\r            Padding(\r              padding: const EdgeInsets.all(8.0),\r              child: DropdownButton<String>(\r                value: _sortOrder,\r                icon: const Icon(Icons.sort),\r                onChanged: (String? newValue) {\r                  setState(() {\r                    _sortOrder = newValue!;\r                  });\r                  _fetchNicknames();\r                },\r                items: <String>['ASC', 'DESC']\r                    .map<DropdownMenuItem<String>>((String value) {\r                  return DropdownMenuItem<String>(\r                    value: value,\r                    child: Text(value),\r                  );\r                }).toList(),\r              ),\r            ),\r          ],\r        ),\r        body: _isLoading\r            ? const Center(child: CircularProgressIndicator())\r            : Padding(\r          padding: const EdgeInsets.all(16.0),\r          child: Column(\r            crossAxisAlignment: CrossAxisAlignment.start,\r            children: [\r              TextField(\r                controller: _searchController,\r                focusNode: _searchFocusNode, \/\/ Attach the focus node for CTRL + F\r                decoration: const InputDecoration(\r                  labelText: 'Search',\r                  border: OutlineInputBorder(),\r                ),\r              ),\r              const SizedBox(height: 20),\r              Text(\r                'Nicknames List',\r                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\r                  color: Theme.of(context).textTheme.bodyMedium?.color,\r                ),\r              ),\r              const SizedBox(height: 20),\r              Expanded(\r                child: SingleChildScrollView(\r                  child: Table(\r                    border: TableBorder.all(\r                      color: Theme.of(context).dividerColor,\r                      width: 1,\r                      borderRadius: BorderRadius.circular(8),\r                    ),\r                    columnWidths: {\r                      0: FlexColumnWidth(2),\r                      1: FlexColumnWidth(1),\r                      2: FlexColumnWidth(2),\r                      3: FlexColumnWidth(1),\r                    },\r                    children: [\r                      TableRow(\r                        decoration: BoxDecoration(\r                          color: Theme.of(context).colorScheme.secondary.withOpacity(0.2),\r                        ),\r                        children: [\r                          _buildCopyableCell('Left Side Design', isHeader: true),\r                          _buildCopyableCell('Symbol', isHeader: true),\r                          _buildCopyableCell('Right Side Design', isHeader: true),\r                          _buildCopyableCell('ID', isHeader: true),\r                        ],\r                      ),\r                      for (var nickname in _filteredNicknames)\r                        TableRow(\r                          decoration: BoxDecoration(\r                            color: _filteredNicknames.indexOf(nickname) % 2 == 0\r                                ? Theme.of(context).colorScheme.background\r                                : Theme.of(context).colorScheme.secondary.withOpacity(0.1),\r                          ),\r                          children: [\r                            _buildCopyableCell(nickname['leftside_design'] ?? 'N\/A'),\r                            _buildCopyableCell(nickname['symbol'] ?? 'N\/A'),\r                            _buildCopyableCell(nickname['rightside_design'] ?? 'N\/A'),\r                            _buildCopyableCell(nickname['id']?.toString() ?? 'N\/A'),\r                          ],\r                        ),\r                    ],\r                  ),\r                ),\r              ),\r            ],\r          ),\r        ),\r      ),\r    );\r  }\r\r  Widget _buildCopyableCell(String text, {bool isHeader = false}) {\r    return GestureDetector(\r      onTap: () => _copyToClipboard(text),\r      child: Padding(\r        padding: const EdgeInsets.all(16.0),\r        child: Text(\r          text,\r          style: TextStyle(\r            fontWeight: isHeader ? FontWeight.bold : FontWeight.normal,\r            fontSize: isHeader ? 16 : 14,\r            color: isHeader\r                ? (Theme.of(context).brightness == Brightness.dark ? Colors.white : Colors.black)\r                : (Theme.of(context).textTheme.bodyMedium?.color),\r          ),\r        ),\r      ),\r    );\r  }\r}\r","rightside_design":"import 'package:flutter\/material.dart';\rimport 'package:http\/http.dart' as http;\rimport 'dart:convert';\rimport 'package:flutter\/services.dart';\r\rclass GetScreen extends StatefulWidget {\r  const GetScreen({super.key});\r\r  @override\r  State<GetScreen> createState() => _GetScreenState();\r}\r\rclass _GetScreenState extends State<GetScreen> {\r  List<Map<String, dynamic>> _nicknames = [];\r  List<Map<String, dynamic>> _filteredNicknames = [];\r  bool _isLoading = false;\r  final TextEditingController _numberController = TextEditingController();\r  final TextEditingController _searchController = TextEditingController();\r  final FocusNode _searchFocusNode = FocusNode(); \/\/ Focus node for the search field\r  String _sortOrder = 'ASC';\r\r  @override\r  void initState() {\r    super.initState();\r    _fetchNicknames();\r    _numberController.addListener(_fetchNicknames);\r    _searchController.addListener(_filterNicknames);\r  }\r\r  Future<void> _fetchNicknames() async {\r    final String numberText = _numberController.text;\r    int? number;\r\r    if (numberText.isNotEmpty) {\r      number = int.tryParse(numberText);\r      if (number == null || number <= 0) {\r        setState(() {\r          _nicknames = [];\r          _filteredNicknames = [];\r        });\r        return;\r      }\r    }\r\r    setState(() {\r      _isLoading = true;\r    });\r\r    try {\r      final response = await http.get(Uri.parse('https:\/\/raw.githubusercontent.com\/TaiyabMachhaliy\/JSON\/refs\/heads\/main\/symbol.json'));\r\r      if (response.statusCode == 200) {\r        final List<dynamic> data = json.decode(response.body);\r\r        if (_sortOrder == 'ASC') {\r          data.sort((a, b) => (a['id'] ?? 0).compareTo(b['id'] ?? 0));\r        } else {\r          data.sort((a, b) => (b['id'] ?? 0).compareTo(a['id'] ?? 0));\r        }\r\r        setState(() {\r          _nicknames = number != null ? data.take(number).cast<Map<String, dynamic>>().toList() : data.cast<Map<String, dynamic>>();\r          _filteredNicknames = List.from(_nicknames);\r        });\r      } else {\r        throw Exception('Failed to load nicknames');\r      }\r    } catch (e) {\r      ScaffoldMessenger.of(context).showSnackBar(\r        SnackBar(content: Text('Error: ${e.toString()}')),\r      );\r    } finally {\r      setState(() {\r        _isLoading = false;\r      });\r    }\r  }\r\r  void _filterNicknames() {\r    String query = _searchController.text.toLowerCase();\r\r    setState(() {\r      _filteredNicknames = _nicknames.where((nickname) {\r        return (nickname['leftside_design'] ?? '').toLowerCase().contains(query) ||\r            (nickname['rightside_design'] ?? '').toLowerCase().contains(query) ||\r            (nickname['symbol'] ?? '').toLowerCase().contains(query) ||\r            (nickname['id']?.toString() ?? '').contains(query);\r      }).toList();\r    });\r  }\r\r  void _copyToClipboard(String text) {\r    Clipboard.setData(ClipboardData(text: text));\r    ScaffoldMessenger.of(context).showSnackBar(\r      SnackBar(content: Text('Copied to clipboard: $text')),\r    );\r  }\r\r  @override\r  void dispose() {\r    _numberController.removeListener(_fetchNicknames);\r    _searchController.removeListener(_filterNicknames);\r    _numberController.dispose();\r    _searchController.dispose();\r    _searchFocusNode.dispose();\r    super.dispose();\r  }\r\r  @override\r  Widget build(BuildContext context) {\r    final isDarkMode = Theme.of(context).brightness == Brightness.dark;\r\r    return RawKeyboardListener(\r      focusNode: FocusNode(),\r      onKey: (RawKeyEvent event) {\r        if (event.isControlPressed && event.logicalKey == LogicalKeyboardKey.keyF) {\r          _searchFocusNode.requestFocus();\r        }\r      },\r      child: Scaffold(\r        appBar: AppBar(\r          title: const Text('Nicknames List'),\r          centerTitle: true,\r          leading: Padding(\r            padding: const EdgeInsets.all(8.0),\r            child: SizedBox(\r              width: 200, \/\/ Increase width to fit the full text\r              child: Center(\r                child: Text(\r                  'Total Designs: ${_filteredNicknames.length}', \/\/ Display text fully\r                  style: TextStyle(\r                    fontWeight: FontWeight.bold,\r                    fontSize: 16,\r                    color: isDarkMode ? Colors.white : Colors.black, \/\/ Adjust for theme\r                  ),\r                  overflow: TextOverflow.ellipsis, \/\/ Handle overflow if needed\r                ),\r              ),\r            ),\r          ),\r\r          actions: [\r            Padding(\r              padding: const EdgeInsets.all(8.0),\r              child: SizedBox(\r                width: 150,\r                child: TextField(\r                  controller: _numberController,\r                  keyboardType: TextInputType.number,\r                  decoration: InputDecoration(\r                    hintText: 'Enter number',\r                    hintStyle: TextStyle(color: isDarkMode ? Colors.white : Colors.black),\r                    border: const OutlineInputBorder(),\r                  ),\r                ),\r              ),\r            ),\r            IconButton(\r              icon: const Icon(Icons.search),\r              onPressed: _fetchNicknames,\r            ),\r            Padding(\r              padding: const EdgeInsets.all(8.0),\r              child: DropdownButton<String>(\r                value: _sortOrder,\r                icon: const Icon(Icons.sort),\r                onChanged: (String? newValue) {\r                  setState(() {\r                    _sortOrder = newValue!;\r                  });\r                  _fetchNicknames();\r                },\r                items: <String>['ASC', 'DESC']\r                    .map<DropdownMenuItem<String>>((String value) {\r                  return DropdownMenuItem<String>(\r                    value: value,\r                    child: Text(value),\r                  );\r                }).toList(),\r              ),\r            ),\r          ],\r        ),\r        body: _isLoading\r            ? const Center(child: CircularProgressIndicator())\r            : Padding(\r          padding: const EdgeInsets.all(16.0),\r          child: Column(\r            crossAxisAlignment: CrossAxisAlignment.start,\r            children: [\r              TextField(\r                controller: _searchController,\r                focusNode: _searchFocusNode, \/\/ Attach the focus node for CTRL + F\r                decoration: const InputDecoration(\r                  labelText: 'Search',\r                  border: OutlineInputBorder(),\r                ),\r              ),\r              const SizedBox(height: 20),\r              Text(\r                'Nicknames List',\r                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\r                  color: Theme.of(context).textTheme.bodyMedium?.color,\r                ),\r              ),\r              const SizedBox(height: 20),\r              Expanded(\r                child: SingleChildScrollView(\r                  child: Table(\r                    border: TableBorder.all(\r                      color: Theme.of(context).dividerColor,\r                      width: 1,\r                      borderRadius: BorderRadius.circular(8),\r                    ),\r                    columnWidths: {\r                      0: FlexColumnWidth(2),\r                      1: FlexColumnWidth(1),\r                      2: FlexColumnWidth(2),\r                      3: FlexColumnWidth(1),\r                    },\r                    children: [\r                      TableRow(\r                        decoration: BoxDecoration(\r                          color: Theme.of(context).colorScheme.secondary.withOpacity(0.2),\r                        ),\r                        children: [\r                          _buildCopyableCell('Left Side Design', isHeader: true),\r                          _buildCopyableCell('Symbol', isHeader: true),\r                          _buildCopyableCell('Right Side Design', isHeader: true),\r                          _buildCopyableCell('ID', isHeader: true),\r                        ],\r                      ),\r                      for (var nickname in _filteredNicknames)\r                        TableRow(\r                          decoration: BoxDecoration(\r                            color: _filteredNicknames.indexOf(nickname) % 2 == 0\r                                ? Theme.of(context).colorScheme.background\r                                : Theme.of(context).colorScheme.secondary.withOpacity(0.1),\r                          ),\r                          children: [\r                            _buildCopyableCell(nickname['leftside_design'] ?? 'N\/A'),\r                            _buildCopyableCell(nickname['symbol'] ?? 'N\/A'),\r                            _buildCopyableCell(nickname['rightside_design'] ?? 'N\/A'),\r                            _buildCopyableCell(nickname['id']?.toString() ?? 'N\/A'),\r                          ],\r                        ),\r                    ],\r                  ),\r                ),\r              ),\r            ],\r          ),\r        ),\r      ),\r    );\r  }\r\r  Widget _buildCopyableCell(String text, {bool isHeader = false}) {\r    return GestureDetector(\r      onTap: () => _copyToClipboard(text),\r      child: Padding(\r        padding: const EdgeInsets.all(16.0),\r        child: Text(\r          text,\r          style: TextStyle(\r            fontWeight: isHeader ? FontWeight.bold : FontWeight.normal,\r            fontSize: isHeader ? 16 : 14,\r            color: isHeader\r                ? (Theme.of(context).brightness == Brightness.dark ? Colors.white : Colors.black)\r                : (Theme.of(context).textTheme.bodyMedium?.color),\r          ),\r        ),\r      ),\r    );\r  }\r}\r","symbol":"import 'package:flutter\/material.dart';\rimport 'package:http\/http.dart' as http;\rimport 'dart:convert';\rimport 'package:flutter\/services.dart';\r\rclass GetScreen extends StatefulWidget {\r  const GetScreen({super.key});\r\r  @override\r  State<GetScreen> createState() => _GetScreenState();\r}\r\rclass _GetScreenState extends State<GetScreen> {\r  List<Map<String, dynamic>> _nicknames = [];\r  List<Map<String, dynamic>> _filteredNicknames = [];\r  bool _isLoading = false;\r  final TextEditingController _numberController = TextEditingController();\r  final TextEditingController _searchController = TextEditingController();\r  final FocusNode _searchFocusNode = FocusNode(); \/\/ Focus node for the search field\r  String _sortOrder = 'ASC';\r\r  @override\r  void initState() {\r    super.initState();\r    _fetchNicknames();\r    _numberController.addListener(_fetchNicknames);\r    _searchController.addListener(_filterNicknames);\r  }\r\r  Future<void> _fetchNicknames() async {\r    final String numberText = _numberController.text;\r    int? number;\r\r    if (numberText.isNotEmpty) {\r      number = int.tryParse(numberText);\r      if (number == null || number <= 0) {\r        setState(() {\r          _nicknames = [];\r          _filteredNicknames = [];\r        });\r        return;\r      }\r    }\r\r    setState(() {\r      _isLoading = true;\r    });\r\r    try {\r      final response = await http.get(Uri.parse('https:\/\/raw.githubusercontent.com\/TaiyabMachhaliy\/JSON\/refs\/heads\/main\/symbol.json'));\r\r      if (response.statusCode == 200) {\r        final List<dynamic> data = json.decode(response.body);\r\r        if (_sortOrder == 'ASC') {\r          data.sort((a, b) => (a['id'] ?? 0).compareTo(b['id'] ?? 0));\r        } else {\r          data.sort((a, b) => (b['id'] ?? 0).compareTo(a['id'] ?? 0));\r        }\r\r        setState(() {\r          _nicknames = number != null ? data.take(number).cast<Map<String, dynamic>>().toList() : data.cast<Map<String, dynamic>>();\r          _filteredNicknames = List.from(_nicknames);\r        });\r      } else {\r        throw Exception('Failed to load nicknames');\r      }\r    } catch (e) {\r      ScaffoldMessenger.of(context).showSnackBar(\r        SnackBar(content: Text('Error: ${e.toString()}')),\r      );\r    } finally {\r      setState(() {\r        _isLoading = false;\r      });\r    }\r  }\r\r  void _filterNicknames() {\r    String query = _searchController.text.toLowerCase();\r\r    setState(() {\r      _filteredNicknames = _nicknames.where((nickname) {\r        return (nickname['leftside_design'] ?? '').toLowerCase().contains(query) ||\r            (nickname['rightside_design'] ?? '').toLowerCase().contains(query) ||\r            (nickname['symbol'] ?? '').toLowerCase().contains(query) ||\r            (nickname['id']?.toString() ?? '').contains(query);\r      }).toList();\r    });\r  }\r\r  void _copyToClipboard(String text) {\r    Clipboard.setData(ClipboardData(text: text));\r    ScaffoldMessenger.of(context).showSnackBar(\r      SnackBar(content: Text('Copied to clipboard: $text')),\r    );\r  }\r\r  @override\r  void dispose() {\r    _numberController.removeListener(_fetchNicknames);\r    _searchController.removeListener(_filterNicknames);\r    _numberController.dispose();\r    _searchController.dispose();\r    _searchFocusNode.dispose();\r    super.dispose();\r  }\r\r  @override\r  Widget build(BuildContext context) {\r    final isDarkMode = Theme.of(context).brightness == Brightness.dark;\r\r    return RawKeyboardListener(\r      focusNode: FocusNode(),\r      onKey: (RawKeyEvent event) {\r        if (event.isControlPressed && event.logicalKey == LogicalKeyboardKey.keyF) {\r          _searchFocusNode.requestFocus();\r        }\r      },\r      child: Scaffold(\r        appBar: AppBar(\r          title: const Text('Nicknames List'),\r          centerTitle: true,\r          leading: Padding(\r            padding: const EdgeInsets.all(8.0),\r            child: SizedBox(\r              width: 200, \/\/ Increase width to fit the full text\r              child: Center(\r                child: Text(\r                  'Total Designs: ${_filteredNicknames.length}', \/\/ Display text fully\r                  style: TextStyle(\r                    fontWeight: FontWeight.bold,\r                    fontSize: 16,\r                    color: isDarkMode ? Colors.white : Colors.black, \/\/ Adjust for theme\r                  ),\r                  overflow: TextOverflow.ellipsis, \/\/ Handle overflow if needed\r                ),\r              ),\r            ),\r          ),\r\r          actions: [\r            Padding(\r              padding: const EdgeInsets.all(8.0),\r              child: SizedBox(\r                width: 150,\r                child: TextField(\r                  controller: _numberController,\r                  keyboardType: TextInputType.number,\r                  decoration: InputDecoration(\r                    hintText: 'Enter number',\r                    hintStyle: TextStyle(color: isDarkMode ? Colors.white : Colors.black),\r                    border: const OutlineInputBorder(),\r                  ),\r                ),\r              ),\r            ),\r            IconButton(\r              icon: const Icon(Icons.search),\r              onPressed: _fetchNicknames,\r            ),\r            Padding(\r              padding: const EdgeInsets.all(8.0),\r              child: DropdownButton<String>(\r                value: _sortOrder,\r                icon: const Icon(Icons.sort),\r                onChanged: (String? newValue) {\r                  setState(() {\r                    _sortOrder = newValue!;\r                  });\r                  _fetchNicknames();\r                },\r                items: <String>['ASC', 'DESC']\r                    .map<DropdownMenuItem<String>>((String value) {\r                  return DropdownMenuItem<String>(\r                    value: value,\r                    child: Text(value),\r                  );\r                }).toList(),\r              ),\r            ),\r          ],\r        ),\r        body: _isLoading\r            ? const Center(child: CircularProgressIndicator())\r            : Padding(\r          padding: const EdgeInsets.all(16.0),\r          child: Column(\r            crossAxisAlignment: CrossAxisAlignment.start,\r            children: [\r              TextField(\r                controller: _searchController,\r                focusNode: _searchFocusNode, \/\/ Attach the focus node for CTRL + F\r                decoration: const InputDecoration(\r                  labelText: 'Search',\r                  border: OutlineInputBorder(),\r                ),\r              ),\r              const SizedBox(height: 20),\r              Text(\r                'Nicknames List',\r                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\r                  color: Theme.of(context).textTheme.bodyMedium?.color,\r                ),\r              ),\r              const SizedBox(height: 20),\r              Expanded(\r                child: SingleChildScrollView(\r                  child: Table(\r                    border: TableBorder.all(\r                      color: Theme.of(context).dividerColor,\r                      width: 1,\r                      borderRadius: BorderRadius.circular(8),\r                    ),\r                    columnWidths: {\r                      0: FlexColumnWidth(2),\r                      1: FlexColumnWidth(1),\r                      2: FlexColumnWidth(2),\r                      3: FlexColumnWidth(1),\r                    },\r                    children: [\r                      TableRow(\r                        decoration: BoxDecoration(\r                          color: Theme.of(context).colorScheme.secondary.withOpacity(0.2),\r                        ),\r                        children: [\r                          _buildCopyableCell('Left Side Design', isHeader: true),\r                          _buildCopyableCell('Symbol', isHeader: true),\r                          _buildCopyableCell('Right Side Design', isHeader: true),\r                          _buildCopyableCell('ID', isHeader: true),\r                        ],\r                      ),\r                      for (var nickname in _filteredNicknames)\r                        TableRow(\r                          decoration: BoxDecoration(\r                            color: _filteredNicknames.indexOf(nickname) % 2 == 0\r                                ? Theme.of(context).colorScheme.background\r                                : Theme.of(context).colorScheme.secondary.withOpacity(0.1),\r                          ),\r                          children: [\r                            _buildCopyableCell(nickname['leftside_design'] ?? 'N\/A'),\r                            _buildCopyableCell(nickname['symbol'] ?? 'N\/A'),\r                            _buildCopyableCell(nickname['rightside_design'] ?? 'N\/A'),\r                            _buildCopyableCell(nickname['id']?.toString() ?? 'N\/A'),\r                          ],\r                        ),\r                    ],\r                  ),\r                ),\r              ),\r            ],\r          ),\r        ),\r      ),\r    );\r  }\r\r  Widget _buildCopyableCell(String text, {bool isHeader = false}) {\r    return GestureDetector(\r      onTap: () => _copyToClipboard(text),\r      child: Padding(\r        padding: const EdgeInsets.all(16.0),\r        child: Text(\r          text,\r          style: TextStyle(\r            fontWeight: isHeader ? FontWeight.bold : FontWeight.normal,\r            fontSize: isHeader ? 16 : 14,\r            color: isHeader\r                ? (Theme.of(context).brightness == Brightness.dark ? Colors.white : Colors.black)\r                : (Theme.of(context).textTheme.bodyMedium?.color),\r          ),\r        ),\r      ),\r    );\r  }\r}\r"},{"id":"87","leftside_design":"1","rightside_design":"1","symbol":"1"}]